{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["esvtAddress","useStyles","makeStyles","theme","root","margin","spacing","width","App","useState","message","setMessageValue","messageHash","setMessageHash","signature","setSignature","address","setAddress","requestAccount","a","window","ethereum","request","method","provider","ethers","providers","Web3Provider","contract","Contract","ESVT","abi","recoverOwner","signer","getSigner","utils","hashMessage","signMessage","signedMSG","className","htmlFor","TextField","id","label","variant","onChange","e","target","value","fullWidth","Button","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yuKAYMA,EAAc,6CAEdC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,aAqEEC,MAhEf,WACkBP,IAAhB,IADa,EAEsBQ,qBAFtB,mBAENC,EAFM,KAEGC,EAFH,OAGyBF,qBAHzB,mBAGNG,EAHM,KAGOC,EAHP,OAIqBJ,qBAJrB,mBAINK,EAJM,KAIKC,EAJL,OAKiBN,qBALjB,mBAKNO,EALM,KAKGC,EALH,cASEC,IATF,2EASb,sBAAAC,EAAA,sEACQC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBAD1C,4CATa,kEAab,gCAAAJ,EAAA,yDACiC,qBAApBC,OAAOC,SADpB,gCAEUH,IAFV,cAIUM,EAAW,IAAIC,IAAOC,UAAUC,aAAaP,OAAOC,UACpDO,EAAW,IAAIH,IAAOI,SAAS7B,EAAa8B,EAAKC,IAAKP,GALhE,SAO0BI,EAASI,aAAapB,EAAaE,GAP7D,OAOUE,EAPV,OASIC,EAAWD,GATf,4CAba,kEA0Bb,kCAAAG,EAAA,yDACiC,qBAApBC,OAAOC,SADpB,iCAEUH,IAFV,cAGUM,EAAW,IAAIC,IAAOC,UAAUC,aAAaP,OAAOC,UACpDY,EAAST,EAASU,YAElBtB,EAAca,IAAOU,MAAMC,YAAY1B,GAC7CG,EAAeD,GAPnB,SAS4BqB,EAAOI,YAAY3B,GAT/C,OASU4B,EATV,OAWIvB,EAAauB,GAXjB,6CA1Ba,sBAyCb,OACE,sBAAKC,UAAU,OAAf,UACE,sCACA,iCACE,oBAAIA,UAAU,gBAAd,SACE,uBAAOC,QAAQ,UAAUD,UAAU,YAAnC,iDAIF,cAACE,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,UAAUC,QAAQ,WAAWC,SAAU,SAAAC,GAAC,OAAInC,EAAgBmC,EAAEC,OAAOC,QAAQC,WAAS,IAC3H,wCACA,cAACC,EAAA,EAAD,CAAQN,QAAQ,YAAYO,KAAK,SAASZ,UAAU,2BAA2Ba,QApDxE,2CAoDP,kBACA,cAACF,EAAA,EAAD,CAAQN,QAAQ,YAAYO,KAAK,SAASZ,UAAU,2BAA2Ba,QArDxE,2CAqDP,oBACA,mDAAsB1C,KACtB,+CAAkBE,KAClB,4CAAeE,KACf,0CAAaE,KACb,mDAAsBhB,YCrEfqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b92e822.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { ethers } from 'ethers'\nimport ESVT from './artifacts/contracts/ESVT.sol/ESVT.json'\nimport '@fontsource/roboto'\n\n// Contract address (local)\n//const esvtAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n// Rinkeby address\nconst esvtAddress = \"0xb330060C65B462ebC71CDeb8C4E81f5B0394C42B\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [message, setMessageValue] = useState() // Input message\n  const [messageHash, setMessageHash] = useState()\n  const [signature, setSignature] = useState()\n  const [address, setAddress] = useState()\n\n\n  // Request access to metamask account\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  async function verifySignature() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(esvtAddress, ESVT.abi, provider)\n\n      const address = await contract.recoverOwner(messageHash, signature)\n      \n      setAddress(address)\n    }\n  }\n\n  async function signMessage() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n\n      const messageHash = ethers.utils.hashMessage(message)\n      setMessageHash(messageHash)\n\n      const signedMSG = await signer.signMessage(message)\n      \n      setSignature(signedMSG)\n    }\n  }\n\n  return (\n    <div className=\"esvt\">\n      <h1>ESVT</h1>\n      <form>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"message\" className=\"label__lg\">\n            ECDSA Signature Verification Tool\n          </label>\n        </h2>\n        <TextField id=\"outlined-basic\" label=\"Message\" variant=\"outlined\" onChange={e => setMessageValue(e.target.value)} fullWidth/>\n        <div>&nbsp; </div>\n        <Button variant=\"contained\" type='button' className=\"btn btn__primary btn__lg\" onClick={signMessage}>SIGN</Button>\n        <Button variant=\"contained\" type='button' className=\"btn btn__primary btn__lg\" onClick={verifySignature}>VERIFY</Button>\n        <p>Original Message: {message}</p>\n        <p>Message Hash: {messageHash}</p>\n        <p>Signature: {signature}</p>\n        <p>Address: {address}</p>\n        <p>Contract address: {esvtAddress}</p>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}