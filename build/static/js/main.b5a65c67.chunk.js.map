{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["esvtAddress","useStyles","makeStyles","theme","root","margin","spacing","width","maxWidth","customWidth","fontSize","App","classes","useState","message","setMessageValue","messageHash","setMessageHash","signature","setSignature","address","setAddress","requestAccount","a","window","ethereum","request","method","provider","ethers","providers","Web3Provider","contract","Contract","ESVT","abi","recoverOwner","signer","getSigner","utils","hashMessage","signMessage","signedMSG","copyToClipboard","clipboardText","navigator","clipboard","writeText","className","Typography","variant","component","gutterBottom","htmlFor","TextField","id","label","onChange","e","target","value","fullWidth","Button","type","onClick","Tooltip","title","tooltip","noWrap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5a65c67.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { ethers } from 'ethers'\nimport ESVT from './artifacts/contracts/ESVT.sol/ESVT.json'\nimport '@fontsource/roboto'\nimport { Tooltip } from '@material-ui/core';\n\n\n// Contract address (local)\n//const esvtAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n// GWEI cost 0.000028245\n// Rinkeby address\nconst esvtAddress = \"0xb330060C65B462ebC71CDeb8C4E81f5B0394C42B\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n      maxWidth:500,\n    },\n  },\n  customWidth: {\n    maxWidth: 500,\n  },\n  fontSize: {\n    fontSize: 15\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [message, setMessageValue] = useState() // Input message\n  const [messageHash, setMessageHash] = useState()\n  const [signature, setSignature] = useState()\n  const [address, setAddress] = useState()\n\n\n  // Request access to metamask account\n  async function requestAccount() {\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\n  }\n\n  async function verifySignature() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(esvtAddress, ESVT.abi, provider)\n\n      const address = await contract.recoverOwner(messageHash, signature)\n      setAddress(address)\n    }\n  }\n\n  async function signMessage() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n\n      const messageHash = ethers.utils.hashMessage(message)\n      setMessageHash(messageHash)\n\n      const signedMSG = await signer.signMessage(message)\n      \n      setSignature(signedMSG)\n    }\n  }\n\n  const copyToClipboard = async (clipboardText) =>{\n    await navigator.clipboard.writeText(clipboardText)\n  }\n\n  return (\n    <div className=\"esvt\">\n      <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n        ESVT\n      </Typography>\n      <form>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"message\" className=\"label__lg\">\n            ECDSA Signature Verification Tool\n          </label>\n        </h2>\n        <TextField id=\"outlined-basic\" label=\"Message\" variant=\"outlined\" onChange={e => setMessageValue(e.target.value)} fullWidth/>\n        <div>&nbsp; </div>\n        <Button variant=\"contained\" type='button' className=\"btn btn__primary btn__lg\" onClick={signMessage}>SIGN</Button>\n        <Button variant=\"contained\" type='button' className=\"btn btn__primary btn__lg\" onClick={verifySignature}>VERIFY</Button>\n        <div>&nbsp; </div>\n        <Typography variant=\"h4\" gutterBottom>\n          Original Message:\n        </Typography>\n        <Tooltip title={'Click to copy!'} onClick={() => { navigator.clipboard.writeText(message) }} classes={{ tooltip: classes.fontSize }}>\n          < Typography noWrap variant = \"h5\" gutterBottom >\n            {message}\n          </Typography>\n        </Tooltip>\n        <div>&nbsp; </div>\n        <Typography variant=\"h4\" gutterBottom>\n          Message Hash:\n        </Typography>\n        <Tooltip title={'Click to copy!'} onClick={() => {copyToClipboard(messageHash)}} classes={{ tooltip: classes.fontSize }}>\n          <Typography noWrap variant=\"h5\" gutterBottom>\n            {messageHash}\n          </Typography>\n        </Tooltip>\n        <div>&nbsp; </div>\n        <Typography variant=\"h4\" gutterBottom>\n          Signature:\n        </Typography>\n        <Tooltip title={'Click to copy!'} onClick={() => {copyToClipboard(signature)}} classes={{ tooltip: classes.fontSize }}>\n          <Typography noWrap variant=\"h5\" gutterBottom>\n            {signature}\n          </Typography>\n        </Tooltip>\n        <div>&nbsp; </div>\n        <Typography variant=\"h4\" gutterBottom>\n          Signer Address:\n        </Typography>\n        <Tooltip title={'Click to copy!'} onClick={() => {copyToClipboard(address)}} classes={{ tooltip: classes.fontSize }}>\n          <Typography noWrap variant=\"h5\" gutterBottom>\n            {address}\n          </Typography>\n        </Tooltip>\n        <div>&nbsp; </div>\n        <Typography variant=\"h4\" gutterBottom>\n          Contract Address:\n        </Typography>\n        <Tooltip title={'Click to copy!'} onClick={() => {copyToClipboard(esvtAddress)}} classes={{ tooltip: classes.fontSize }}>\n          <Typography noWrap variant=\"h5\" gutterBottom>\n            {esvtAddress}\n          </Typography>\n        </Tooltip>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}